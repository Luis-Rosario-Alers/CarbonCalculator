name: Build and Release

# Trigger the workflow on push to tags matching the pattern "v*.*.*"
on:
  push:
    tags:
      - "v*.*.*"

permissions:
  contents: read
  packages: write
  actions: write

jobs:
  build:
    continue-on-error: true
    # Define a matrix build to run on the latest versions of Ubuntu, macOS, and Windows
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      # Delete tag on failure
      - name: Delete tag on failure
        if: failure()
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const tag = '${{ github.ref }}'.replace('refs/tags/', '');
            await github.rest.git.deleteRef({
              owner: context.repo.owner,
              repo: context.repo.name,
              ref: `tags/${tag}`
            });
      - uses: actions/checkout@v4
      # Set up Python 3.12
      - uses: actions/setup-python@v5.0.0
        with:
          python-version: '3.12'
      # Install dependencies
      - run: |
          python -m pip install --upgrade pip
          pip install pyinstaller
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        shell: bash
      - name: Install dependencies on Linux
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libxkbcommon-x11-0 libxcb-shape0 libxcb-xkb1 libxcb-icccm4 libxcb-render-util0 libxcb-image0 libxcb-cursor0 libxcb-keysyms1
        shell: bash
      - run: |
          LOG_LEVEL=debug
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            pyinstaller \
              --add-data "src/data/resources:resources" \
              --icon "src/data/resources/assets/icon.ico" \
              --paths src \
              src/main.py \
              --name CarbonCalculator
          elif [ "$RUNNER_OS" == "macOS" ]; then
            pyinstaller \
              --add-data "src/data/resources:resources" \
              --icon "src/data/resources/assets/icon.icns" \
              --paths src \
              src/main.py \
              --name CarbonCalculator
          else
            pyinstaller \
              --add-data "src/data/resources:resources" \
              --icon "src/data/resources/assets/icon.png" \
              --paths src \
              src/main.py \
              --name CarbonCalculator
          fi
        shell: bash
      # Archive the build artifacts
      - run: |
          echo "Current working directory: $(pwd)"
          echo "Files in the current directory:"
          ls -al
          echo "Files in the dist directory:"
          ls -al dist
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            if [ -d dist/CarbonCalculator ]; then
              rm -rf build/CarbonCalculator
              mkdir -p build/
              mv dist/CarbonCalculator build/
            else
              echo "Directory dist/CarbonCalculator not found"
              exit 1
            fi
          else
            if [ -d dist/CarbonCalculator ]; then
              rm -rf build/CarbonCalculator
              mv dist/CarbonCalculator build/
            else
              echo "Directory dist/CarbonCalculator not found"
              exit 1
            fi
          fi
        shell: bash
      # Upload the build artifacts
      - uses: actions/upload-artifact@v4
        with:
          name: CarbonCalculator-${{ matrix.os }}
          path: build/

  release:
    permissions:
      contents: write
    continue-on-error: true
    needs: build
    runs-on: ubuntu-latest
    steps:
      # Download the build artifacts for each OS
      - uses: actions/download-artifact@v4
        with:
          name: CarbonCalculator-ubuntu-latest
          path: build/linux
      - uses: actions/download-artifact@v4
        with:
          name: CarbonCalculator-macos-latest
          path: build/macos
      - uses: actions/download-artifact@v4
        with:
          name: CarbonCalculator-windows-latest
          path: build/windows

      # Debug: List downloaded artifacts
      - name: List downloaded artifacts
        run: |
          echo "Linux artifacts:"
          ls -R build/linux
          echo "MacOS artifacts:"
          ls -R build/macos
          echo "Windows artifacts:"
          ls -R build/windows

      # Install GitHub CLI
      - name: Install GitHub CLI
        run: |
          type -p curl >/dev/null || (sudo apt update && sudo apt install curl -y)
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
          && sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \
          && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
          && sudo apt update \
          && sudo apt install gh -y

      # Create release
      - name: Create Release
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          response=$(gh api \
            --method POST \
            /repos/${{ github.repository }}/releases \
            -f tag_name="${{ github.ref_name }}" \
            -f name="Release ${{ github.ref_name }}" \
            -f draft=true \
            -f prerelease=false)
          echo "UPLOAD_URL=$(echo $response | jq -r .upload_url)" >> $GITHUB_ENV

      # Upload assets with correct paths
      - name: Upload Release Assets
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          for file in $(find build -type f); do
            gh release upload ${{ github.ref_name }} "$file" --clobber
          done

